// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// computeN
double computeN(double t);
RcppExport SEXP elves_computeN(SEXP tSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type t(tSEXP );
        double __result = computeN(t);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// computeM
double computeM(double t);
RcppExport SEXP elves_computeM(SEXP tSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type t(tSEXP );
        double __result = computeM(t);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// diff_days
double diff_days(Datetime start, Datetime end);
RcppExport SEXP elves_diff_days(SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Datetime >::type start(startSEXP );
        Rcpp::traits::input_parameter< Datetime >::type end(endSEXP );
        double __result = diff_days(start, end);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// calc_sanctioned_hours
double calc_sanctioned_hours(Datetime start, double duration);
RcppExport SEXP elves_calc_sanctioned_hours(SEXP startSEXP, SEXP durationSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Datetime >::type start(startSEXP );
        Rcpp::traits::input_parameter< double >::type duration(durationSEXP );
        double __result = calc_sanctioned_hours(start, duration);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// calc_unsanctioned_hours
double calc_unsanctioned_hours(Datetime start, double duration);
RcppExport SEXP elves_calc_unsanctioned_hours(SEXP startSEXP, SEXP durationSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Datetime >::type start(startSEXP );
        Rcpp::traits::input_parameter< double >::type duration(durationSEXP );
        double __result = calc_unsanctioned_hours(start, duration);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// calc_p
double calc_p(double p0, double n, double m);
RcppExport SEXP elves_calc_p(SEXP p0SEXP, SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type p0(p0SEXP );
        Rcpp::traits::input_parameter< double >::type n(nSEXP );
        Rcpp::traits::input_parameter< double >::type m(mSEXP );
        double __result = calc_p(p0, n, m);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// next_9am
Datetime next_9am(Datetime dtime);
RcppExport SEXP elves_next_9am(SEXP dtimeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Datetime >::type dtime(dtimeSEXP );
        Datetime __result = next_9am(dtime);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// pickStart
Datetime pickStart(Datetime previousEnd, double previousM, int duration, double productivity, double threshold);
RcppExport SEXP elves_pickStart(SEXP previousEndSEXP, SEXP previousMSEXP, SEXP durationSEXP, SEXP productivitySEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Datetime >::type previousEnd(previousEndSEXP );
        Rcpp::traits::input_parameter< double >::type previousM(previousMSEXP );
        Rcpp::traits::input_parameter< int >::type duration(durationSEXP );
        Rcpp::traits::input_parameter< double >::type productivity(productivitySEXP );
        Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP );
        Datetime __result = pickStart(previousEnd, previousM, duration, productivity, threshold);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// book_elf_c
DataFrame book_elf_c(DatetimeVector& theArrival, NumericVector& theDuration, double threshold);
RcppExport SEXP elves_book_elf_c(SEXP theArrivalSEXP, SEXP theDurationSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< DatetimeVector& >::type theArrival(theArrivalSEXP );
        Rcpp::traits::input_parameter< NumericVector& >::type theDuration(theDurationSEXP );
        Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP );
        DataFrame __result = book_elf_c(theArrival, theDuration, threshold);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
